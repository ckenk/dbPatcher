//D:\workspace_web_dev_workshop\dbedit_client>npm -version
//3.8.9
//D:\workspace_web_dev_workshop\dbedit_client>bower -version
//1.7.9

import org.apache.tools.ant.filters.ReplaceTokens

defaultTasks 'buildClient'

buildscript {
  repositories {
    jcenter()
    mavenCentral()

    //local jar
//		flatDir dirs: "libs"
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath "com.moowork.gradle:gradle-node-plugin:0.12"
    classpath "com.moowork.gradle:gradle-grunt-plugin:0.12"
  }
}

//apply plugin: 'java'
apply plugin: "com.moowork.node"
apply plugin: 'com.moowork.grunt'

/**
 * processResources: a java plugin task, used for copying resource files from 'src/main/resources' to <some_where>
 * This does NOT work in Linux Build Servers!@!@#@. Only works in windows.
 * So using copyDistDir custom task for that.
 */
//processResources.dependsOn "buildClient"
//processResources{
//  dependsOn "buildClient"
//  from ('dist')
//}


//task copyDistDir(type: Copy) {
// from 'dist'
//  into "${project.buildDir}/resources/main/public"
//  def dist = "${project.buildDir}/resources/main/public"
//  println("============ dist = ${dist}")
//  into dist
//  println("============ copyDistDir config  ===============")

//  doLast{
//    //println("#######################  copying files in to ${project.parent.buildDir} ################")
//    println("#######################  copyDistDir copying files in to ${dist} ################")
//  }
//}


task configDeployIpOrDNS () {
  def deployTarget = "$System.env.DEPLOY_TARGET"
  println("deployTarget ============================ ${deployTarget}")
  doLast {
    if(deployTarget != null && deployTarget.isEmpty())
      ant.replace(file: "./app/scripts/app.js", token: "\'http://localhost:8008\'", value: deployTarget)
  }
}


repositories {
  mavenCentral()
}


node {
  // Version of node to use.
  version = '6.2.0'

  // Version of npm to use.
  npmVersion = '3.8.9'

  // Base URL for fetching node distributions (change if you have a mirror).
  distBaseUrl = 'https://nodejs.org/dist'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}


grunt {
  // Set the directory where Gruntfile.js should be found
  workDir = file("${project.projectDir}")

  // Whether colors should output on the terminal
  colors = true

  // Whether output from Grunt should be buffered - useful when running tasks in parallel
  bufferOutput = false
}


//task build () {
//  dependsOn 'buildClient'
//}


////task buildClient(dependsOn:'npm_install','grunt_build') << {
//task buildClient << {
//  //npmInstall.dependsOn(npm_cache_clean)
//
//  def workDir = file("${project.projectDir}")
//  println("workDir = $workDir")
//}
////buildClient.dependsOn 'npm_install' --> works
////buildClient.dependsOn 'npm_install' 'grunt_build'
////buildClient.dependsOn 'npm_install' 'install_grunt'
//buildClient.dependsOn 'installGrunt'

task buildClient () {
  //dependsOn 'bowerInstall','installGrunt','configDeployIpOrDNS','grunt_build','copyDistDir'
  dependsOn 'bowerInstall','installGrunt','configDeployIpOrDNS','grunt_build'

  doLast {
    println("buildClient called..................")
    def workDir = file("${project.projectDir}")
    println("workDir = $workDir")
  }
}

task gruntBuildWithOpts(type: GruntTask) {
  args = ["build", "--debug", "--force"]
}
grunt_build.dependsOn 'gruntBuildWithOpts'


task npmCacheConfig(type: NpmTask) {
  description = "Configure the NPM cache"
  def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
  outputs.files file(npmCacheDir)
  args = [ 'config', 'set', 'cache', npmCacheDir ]
}


//https://objectpartners.com/2015/04/29/using-gradle-and-bower-to-manage-jscss-dependencies/
task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
  description = "Install Node.js packages"
  args = [ 'install' ]
  inputs.files file('package.json')
  outputs.files file('node_modules')
}


task bowerInstall(type: NodeTask) {
  script = file('node_modules/bower/bin/bower')
  args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
          "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
          "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
          'install',
		  '--info',
		  '--allow-root']
  inputs.files file('bower.json')
  outputs.files file('bower_components')
  dependsOn npmPackages
}


//clean.delete << file('dist')
task clean(type: Delete) {
  delete ".tmp"
  delete "build"
  delete "dist"
}