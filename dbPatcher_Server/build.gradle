defaultTasks 'build'


buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}


apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'


jar {
	baseName = 'varvereditor'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
	mavenCentral()

	//Both flatDir's work
//	flatDir {
//		dirs 'libs'
//	}
	flatDir dirs: 'libs'
}


//processResources.dependsOn 'distDir'

//task distDir(type: Copy) {
//	from 'client/dist'
//	into 'build/resources/main/public'
//}
task distDir() {
	copy {
		println("Working DIR = $project.projectDir")
		//from 'client/dist'
		into 'build/resources/main/public'
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.springframework.boot:spring-boot-starter-data-jpa")

	compile "org.springframework:spring-jdbc:$springVersion"
	compile "org.hibernate:hibernate-core:$hibernateVersion"
	compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
	compile 'org.codehaus.groovy:groovy-all:2.4.4'
	compile "com.h2database:h2:$h2Version"

	compile "commons-dbcp:commons-dbcp:$commonsDbcp"
	compile "commons-fileupload:commons-fileupload:$commonsFileUpload"
	compile "org.apache.httpcomponents:httpmime" //org.apache.http.*

	compile "javax.servlet:javax.servlet-api:3.1.0"

	runtime name: 'sqlite-jdbc-3.7.8'

	testCompile('org.springframework.boot:spring-boot-starter-test')
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}


//task buildAll() {
//	dependsOn ':client:buildClient', 'build'
//}
build.dependsOn{
	//':client:buildClient','distDir'
	//[':client:buildClient','distDir']
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        println "===================  ${task.name} FAILED  ==================="
    }
    else {
        println "===================  ${task.name} done  ==================="
    }
}

//Comes from Java plugin
//processResources {
//	dependsOn ':client:processResources'
//	println("Server processResources called......................")
//	from ('client/dist')
//}


//task publicFolder(type: Copy) {
//
//	//Anything outside of doLast will be executed during configuration phase.
//	//http://stackoverflow.com/questions/23546286/gradle-task-should-not-execute-automatically
//	doLast {
//		println "publicFolder was called............................"
//		from 'client/dist' into 'public'
//	}
//}